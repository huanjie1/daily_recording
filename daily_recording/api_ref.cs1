using System;
using System.Diagnostics;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using System.Runtime.InteropServices;

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        IntPtr windowhandle;
        StringBuilder windowname = new StringBuilder(250);
        StringBuilder processname = new StringBuilder(250);//初始化需要够大的空间
        int maxnamelength = 250;
        int namelength;
        int processnamelength;
        int threadid;
        int processid;
        IntPtr processHandle = IntPtr.Zero;
        const int PROCESS_ALL_ACCESS = 0x000F0000 | 0x00100000 | 0xFFF | 0x0400 | 0x1000 | 0x0010;

        string tempfn;
        int filenamep;

        [DllImport("user32.dll")]
        private static extern IntPtr GetActiveWindow();

        [DllImport("user32.dll")]
        private static extern IntPtr GetForegroundWindow();

        [DllImport("user32.dll")]
        public static extern int GetWindowText(IntPtr hWnd, StringBuilder lpString, int nMaxCount);

        [DllImport("User32.dll", CharSet = CharSet.Auto)]
        public static extern int GetWindowThreadProcessId(IntPtr hwnd, out int ID);

        [DllImport("kernel32.dll")]
        public extern static IntPtr OpenProcess(int fdwAccess, bool fInherit, int IDProcess);

        //[DllImport("Kernel32", EntryPoint = "GetModuleFileName")]
        //private static extern int GetModuleFileNameEX(IntPtr hProcess, IntPtr hModule, [Out] StringBuilder lpszFileName, int nSize);
        ////private static extern int GetModuleFileNameEX(IntPtr hProcess, IntPtr hModule, StringBuilder lpszFileName, int nSize);

        [DllImport("Kernel32")]
        private static extern int K32GetModuleFileNameEx(IntPtr hProcess, IntPtr hModule, [Out] StringBuilder lpszFileName, int nSize);
        //private static extern int GetModuleFileNameEX(IntPtr hProcess, IntPtr hModule, StringBuilder lpszFileName, int nSize);

        [DllImport("Kernel32")]
        private static extern bool QueryFullProcessImageName(IntPtr hProcess, int dwFlags, [Out] StringBuilder lpszFileName, ref int nSize);

        [DllImport("Kernel32")]
        private extern static Boolean CloseHandle(IntPtr handle);

        [DllImport("Kernel32.dll")]
        public static extern uint GetLastError();

        [DllImport("Kernel32.dll")]
        public extern static int K32GetProcessImageFileName(IntPtr hProcess, StringBuilder lpszFileName, int nSize);

        private void timer1_Tick(object sender, EventArgs e)
        {
            int maxnamelength2 = 250;
            windowhandle = GetForegroundWindow();
            label1.Text = windowhandle.ToString();

            namelength = GetWindowText(windowhandle, windowname, maxnamelength);
            label2.Text = namelength.ToString() + "   " + windowname;

            threadid = GetWindowThreadProcessId(windowhandle, out processid);//引用输出为进程ID，返回值为线程ID

            try
            {
                tempfn = Process.GetProcessById(processid).MainModule.FileVersionInfo.FileName.ToString();
                filenamep = tempfn.LastIndexOf("\\");
                label3.Text = tempfn.Substring(filenamep + 1, tempfn.Length - filenamep - 1);
                label3.Text += Process.GetProcessById(processid).MainModule.FileVersionInfo.FileDescription.ToString();
            }
            catch { }
            label4.Text = Control.MousePosition.X.ToString();
            label5.Text = Control.MousePosition.Y.ToString();



            //processHandle = OpenProcess(PROCESS_ALL_ACCESS, false, processid);
            //if (IntPtr.Zero == processHandle)
            //    MessageBox.Show(GetLastError().ToString());
            ////新版本系统需添加K32
            //processnamelength = K32GetModuleFileNameEx(processHandle, IntPtr.Zero, processname, maxnamelength);
            //////新版本系统需添加K32
            ////processnamelength = K32GetProcessImageFileName(processHandle, processname, maxnamelength);//C:会变成\Device\HarddiskVolume9\
            ////QueryFullProcessImageName(processHandle, 0, processname, ref maxnamelength2);//引用maxnamelength只能成功一次
            //string er1 = GetLastError().ToString();
            //CloseHandle(processHandle);

            //label3.Text = processnamelength.ToString() + "   " + processname;

        }

        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            timer1.Enabled = true;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            timer1.Enabled = false;
        }

        

        
    }
}
